import streamlit as st
import pandas as pd
import numpy as np
from scipy import stats
import plotly.express as px
import plotly.graph_objects as go
import plotly.figure_factory as ff
from plotly.subplots import make_subplots
from plotly.colors import get_colorscale
from plotly.colors import find_intermediate_color
import streamlit.components.v1 as components

def process_deals(data):
    st.header("–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö Deals")

    # –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è Deals
    st.sidebar.header("–§–∏–ª—å—Ç—Ä—ã –¥–ª—è Deals")
    data['SLA'] = pd.to_timedelta(data['SLA'].astype(str))
    
    # –§–∏–ª—å—Ç—Ä –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π: –ª—é–±—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–µ –ø–æ–ª—è, –∏—Å–∫–ª—é—á–∞—è —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ "time", "date"
    category_column = st.sidebar.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—É—é –∫–æ–ª–æ–Ω–∫—É", 
        [None] + [col for col in data.select_dtypes(include='object').columns 
                  if not any(keyword in col.lower() for keyword in ["time", "date"])],
        format_func=lambda x: "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–æ–Ω–∫—É" if x is None else x
    )


    # –§–∏–ª—å—Ç—Ä –¥–ª—è –¥–∞—Ç—ã: —Ç–æ–ª—å–∫–æ –∫–æ–ª–æ–Ω–∫–∏ —Å "time" –∏–ª–∏ "date"
    date_column = st.sidebar.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–æ–Ω–∫—É —Å –¥–∞—Ç–∞–º–∏", 
        [None] + [col for col in data.columns if any(keyword in col.lower() for keyword in ["time", "date"])],
        format_func=lambda x: "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–æ–Ω–∫—É" if x is None else x
    )


    # # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    # st.title("–ú–æ–π –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –¥–∞—à–±–æ—Ä–¥")
    
    # –£–ª—É—á—à–µ–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞: –≤–∫–ª–∞–¥–∫–∏ –∑–∞–º–µ–Ω–µ–Ω—ã –∫–Ω–æ–ø–∫–∞–º–∏
    tab_selected = st.radio(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∞–Ω–∞–ª–∏–∑:",
        options=[
            "üìä –î–∞–Ω–Ω—ã–µ –∏ –æ–ø–∏—Å–∞—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", 
            "üìà –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π", 
            "üìâ –ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤", 
            "üìã –ê–Ω–∞–ª–∏–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫–∞–º–ø–∞–Ω–∏–π –∏ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤",
            "üíº –ê–Ω–∞–ª–∏–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç—ã –æ—Ç–¥–µ–ª–∞ –ø—Ä–æ–¥–∞–∂",
            "üí∞ –ê–Ω–∞–ª–∏–∑ –ø–ª–∞—Ç–µ–∂–µ–π –∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤",
            "üåç –ì–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑"
        ],
        horizontal=True
    )


    if tab_selected == "üìä –î–∞–Ω–Ω—ã–µ –∏ –æ–ø–∏—Å–∞—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        st.subheader("üìä –î–∞–Ω–Ω—ã–µ –∏ –æ–ø–∏—Å–∞—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        st.dataframe(data.head())
    
        # –û–ø–∏—Å–∞—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        st.subheader("–û–ø–∏—Å–∞—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        descriptive_stats = data.describe(include='all')
        
        # –£–∫–∞–∑–∞–Ω–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–ø–∏—Å–∞—Ç–µ–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        categorical_fields = [
            'Quality', 'Stage', 'Source', 'Product', 
            'Payment Type', 'Education Type', 'Lost Reason'
        ]
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –æ–ø–∏—Å–∞—Ç–µ–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        descriptive_stats = data[categorical_fields].describe(include='all')
        
        # –í—ã–≤–æ–¥–∏–º –æ–ø–∏—Å–∞—Ç–µ–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        rows_to_keep = ["count", "unique", "top", "freq"]
        st.dataframe(descriptive_stats.loc[rows_to_keep])
    
    
        # –°–≤–æ–¥–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã—Ö —á–∏—Å–ª–æ–≤—ã—Ö –ø–æ–ª–µ–π
        st.subheader("–°–≤–æ–¥–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è —á–∏—Å–ª–æ–≤—ã—Ö –ø–æ–ª–µ–π")
        st.dataframe(data[['Course duration', 'Months of study', 'Initial Amount Paid', 'Offer Total Amount', 'SLA']].describe().T)

        data['SLA'] = pd.to_timedelta(data['SLA'].astype(str))
        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —á–∏—Å–ª–æ–≤—ã—Ö –∫–æ–ª–æ–Ω–æ–∫ –∏–∑ exclude_columns
        numerical_fields = ['Course duration', 'Months of study', 'Initial Amount Paid', 'Offer Total Amount']
        
        if not numerical_fields:
            st.warning("–ù–µ—Ç —á–∏—Å–ª–æ–≤—ã—Ö –ø–æ–ª–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Ä–µ–¥–∏ –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã—Ö.")
        else:
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
            summary_stats = []
            for field in numerical_fields:
                column_data = data[field].dropna()  # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        
                # –í—ã—á–∏—Å–ª–µ–Ω–∏—è
                mean_val = column_data.mean()
                median_val = column_data.median()
                mode_val = column_data.mode().iloc[0] if not column_data.mode().empty else "–ù–µ—Ç –º–æ–¥—ã"
                range_val = column_data.max() - column_data.min()
        
                # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü—É
                summary_stats.append({
                    "–ü–æ–ª–µ": field,
                    "–°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ": mean_val,
                    "–ú–µ–¥–∏–∞–Ω–∞": median_val,
                    "–ú–æ–¥–∞": mode_val,
                    "–î–∏–∞–ø–∞–∑–æ–Ω": range_val
                })
        
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π –≤ DataFrame
            summary_df = pd.DataFrame(summary_stats)
        
            # –í—ã–≤–æ–¥ —Å –ø–æ–º–æ—â—å—é st.dataframe
            st.dataframe(summary_df.style.format({
                "–°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ": "{:.2f}",
                "–ú–µ–¥–∏–∞–Ω–∞": "{:.2f}",
                "–î–∏–∞–ø–∞–∑–æ–Ω": "{:.2f}"
            }))



    elif tab_selected == "üìà –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π":
        st.subheader("üìà –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
        if category_column:
            with st.form(key="category_visualization_form"):
                col1, col2 = st.columns(2)
                with col1:
                    include_nan = st.radio(
                        "–í–∫–ª—é—á–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è NaN?",
                        options=["–ë–µ–∑ NaN", "–° NaN"],
                        index=0,
                        horizontal=True,
                        key="include_nan_radio"  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á
                    )
        
                with col2:
                    chart_type = st.radio(
                        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≥—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π",
                        options=["BarH", "BarV", "Pie"],
                        index=0,
                        horizontal=True,
                        key="chart_type_radio"  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á
                    )
        
                # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                submit_button = st.form_submit_button("–û–±–Ω–æ–≤–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫")
        
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É
            if submit_button:
                category_data = data[category_column].copy()
                if include_nan == "–° NaN":
                    category_data = category_data.fillna("NaN")
                else:
                    category_data = category_data.dropna()
        
                category_counts = category_data.value_counts()
                if category_counts.empty:
                    st.warning(f"–ö–æ–ª–æ–Ω–∫–∞ '{category_column}' –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏.")
                else:
                    # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–æ —Ç–æ–ø-10 –∫–∞—Ç–µ–≥–æ—Ä–∏–π
                    if len(category_counts) > 10:
                        category_counts = category_counts.head(10)
                        st.info("–ü–æ–∫–∞–∑–∞–Ω—ã —Ç–æ–ª—å–∫–æ —Ç–æ–ø-10 –∫–∞—Ç–µ–≥–æ—Ä–∏–π.")
        
                    if chart_type == "BarH":
                        fig_category = go.Figure(
                            go.Bar(
                                x=category_counts.values,
                                y=category_counts.index,
                                orientation="h",
                                marker=dict(color="royalblue"),
                                text=category_counts.values,
                                textposition="outside"
                            )
                        )
                        fig_category.update_layout(
                            title=f"–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ {category_column}",
                            xaxis=dict(title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"),
                            yaxis=dict(title="–ö–∞—Ç–µ–≥–æ—Ä–∏–∏", autorange="reversed"),
                            plot_bgcolor="white"
                        )
        
                    elif chart_type == "BarV":
                        fig_category = go.Figure(
                            go.Bar(
                                x=category_counts.index,
                                y=category_counts.values,
                                marker=dict(color="royalblue"),
                                text=category_counts.values,
                                textposition="outside"
                            )
                        )
                        fig_category.update_layout(
                            title=f"–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ {category_column}",
                            xaxis=dict(title="–ö–∞—Ç–µ–≥–æ—Ä–∏–∏"),
                            yaxis=dict(title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"),
                            plot_bgcolor="white"
                        )
        
                    elif chart_type == "Pie":
                        fig_category = px.pie(
                            values=category_counts.values,
                            names=category_counts.index,
                            title=f"–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ {category_column}",
                            color_discrete_sequence=px.colors.qualitative.Plotly
                        )
        
                    st.plotly_chart(fig_category)
        else:
            st.write("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å –ª–µ–≤–æ–π –ø–∞–Ω–µ–ª–∏")


    
    
    
    elif tab_selected == "üìâ –ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤":
        st.subheader("üìâ –ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤")
        if date_column:
            data[date_column] = pd.to_datetime(data[date_column])
            st.subheader("–¢–µ–Ω–¥–µ–Ω—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–¥–µ–ª–æ–∫ —Å —Ç–µ—á–µ–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–∏")
            deal_filter = st.radio(
                "–í—ã–±–µ—Ä–∏—Ç–µ —Å–¥–µ–ª–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞",
                options=["–í—Å–µ —Å–¥–µ–ª–∫–∏", "–£—Å–ø–µ—à–Ω—ã–µ —Å–¥–µ–ª–∫–∏"],
                index=0,
                horizontal=True
            )

            if deal_filter == "–£—Å–ø–µ—à–Ω—ã–µ —Å–¥–µ–ª–∫–∏":
                filtered_data = data[data['Months of study'].notnull()]
            else:
                filtered_data = data

            aggregation_level = st.radio(
                "–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –∞–≥—Ä–µ–≥–∞—Ü–∏–∏",
                options=["–ú–µ—Å—è—Ü", "–î–µ–Ω—å"],
                index=0,
                horizontal=True
            )

            if aggregation_level == "–î–µ–Ω—å":
                time_series = filtered_data.groupby(filtered_data[date_column].dt.date).size()
                title = f"–¢–µ–Ω–¥–µ–Ω—Ü–∏—è —Å–¥–µ–ª–æ–∫ (–µ–∂–µ–¥–Ω–µ–≤–Ω–æ)"

                fig_time = px.line(
                    x=time_series.index.astype(str),
                    y=time_series.values,
                    title=title,
                    labels={"x": "–î–∞—Ç–∞", "y": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫"}
                )

            else:
                time_series = filtered_data.groupby(filtered_data[date_column].dt.to_period("M")).size()
                title = f"–¢–µ–Ω–¥–µ–Ω—Ü–∏—è —Å–¥–µ–ª–æ–∫ (–µ–∂–µ–º–µ—Å—è—á–Ω–æ)"

                fig_time = px.line(
                    x=time_series.index.astype(str),
                    y=time_series.values,
                    title=title,
                    labels={"x": "–î–∞—Ç–∞", "y": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫"},
                    text=time_series.values
                )

                fig_time.update_traces(textposition="top center")

            fig_time.update_layout(
                title=title,
                xaxis=dict(title="–î–∞—Ç–∞"),
                yaxis=dict(title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫"),
                plot_bgcolor="white"
            )

            st.plotly_chart(fig_time)
        else:
            st.write("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–æ–Ω–∫—É —Å –¥–∞—Ç–∞–º–∏ —Å –ª–µ–≤–æ–π –ø–∞–Ω–µ–ª–∏")            

        
        # --- –ü–µ—Ä–≤—ã–π –∞–Ω–∞–ª–∏–∑: –°–≤—è–∑—å –º–µ–∂–¥—É –∑–≤–æ–Ω–∫–∞–º–∏ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ–º —Å–¥–µ–ª–æ–∫ ---
        st.subheader("–°–≤—è–∑—å –º–µ–∂–¥—É –∑–≤–æ–Ω–∫–∞–º–∏ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ–º —É—Å–ø–µ—à–Ω—ã—Ö —Å–¥–µ–ª–æ–∫")
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –∑–≤–æ–Ω–∫–∞—Ö
        calls_data = pd.read_csv("demo_data/Cleaned_Calls.csv")
        
        # –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫ –µ–¥–∏–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É
        calls_data['CONTACTID'] = calls_data['CONTACTID'].astype(str)
        data['Contact Name'] = data['Contact Name'].astype(str)
        
        # –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–æ–≤ —Å –¥–∞—Ç–∞–º–∏ –∫ datetime
        calls_data['Call Start Time'] = pd.to_datetime(calls_data['Call Start Time'])
        data['Created Time'] = pd.to_datetime(data['Created Time'])
        
        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω—ã—Ö —Å–¥–µ–ª–æ–∫
        # successful_deals = data[data['Months of study'].notnull()]
        
        # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –∑–≤–æ–Ω–∫–æ–≤ –ø–æ –º–µ—Å—è—Ü–∞–º
        monthly_calls = calls_data.resample('ME', on='Call Start Time').size().reset_index(name='Call Count')
        
        # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —É—Å–ø–µ—à–Ω—ã—Ö —Å–¥–µ–ª–æ–∫ –ø–æ –º–µ—Å—è—Ü–∞–º
        monthly_deals = data.resample('ME', on='Created Time').size().reset_index(name='Deal Count')

        # –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        monthly_data = pd.merge(
            monthly_calls,
            monthly_deals,
            left_on='Call Start Time',
            right_on='Created Time',
            how='outer'
        ).fillna(0)
        
        # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–æ–≤
        monthly_data.rename(columns={'Call Start Time': 'Date'}, inplace=True)
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—é
        correlation = monthly_data['Call Count'].corr(monthly_data['Deal Count'])
        st.write(f"–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è –º–µ–∂–¥—É –∑–≤–æ–Ω–∫–∞–º–∏ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ–º —Å–¥–µ–ª–æ–∫: {correlation:.2f}")

        fig_deals_calls = go.Figure()
        
        # –õ–∏–Ω–∏—è –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–≤–æ–Ω–∫–æ–≤
        fig_deals_calls.add_trace(
            go.Scatter(
                x=monthly_data['Date'],
                y=monthly_data['Call Count'],
                mode='lines+markers',
                name='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–æ–Ω–∫–æ–≤',
                line=dict(color='mediumorchid'),
                yaxis='y1'  # –°–≤—è–∑—å —Å –ø–µ—Ä–≤–æ–π –æ—Å—å—é
            )
        )
        
        # –õ–∏–Ω–∏—è –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É—Å–ø–µ—à–Ω—ã—Ö —Å–¥–µ–ª–æ–∫
        fig_deals_calls.add_trace(
            go.Scatter(
                x=monthly_data['Date'],
                y=monthly_data['Deal Count'],
                mode="lines+markers",  # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
                name='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫',
                line=dict(color='royalblue'),
                yaxis='y2',  # –°–≤—è–∑—å —Å–æ –≤—Ç–æ—Ä–æ–π –æ—Å—å—é
                # text=monthly_data['Deal Count'].round(),  # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (–æ–∫—Ä—É–≥–ª–µ–Ω–æ)
                # textposition="top center"  # –†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
            )
        )
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–µ–π
        fig_deals_calls.update_layout(
            # title='–°–≤—è–∑—å –º–µ–∂–¥—É –∑–≤–æ–Ω–∫–∞–º–∏ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ–º —É—Å–ø–µ—à–Ω—ã—Ö —Å–¥–µ–ª–æ–∫',
            xaxis=dict(title='–î–∞—Ç–∞'),
            yaxis=dict(
                title='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–æ–Ω–∫–æ–≤',
                titlefont=dict(color='mediumorchid'),
                tickfont=dict(color='mediumorchid'),
                showgrid=False  # –û—Ç–∫–ª—é—á–∞–µ—Ç –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—É—é —Å–µ—Ç–∫—É –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–π –æ—Å–∏ Y
            ),
            yaxis2=dict(
                title='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫',
                titlefont=dict(color='royalblue'),
                tickfont=dict(color='royalblue'),
                showgrid=False,  # –û—Ç–∫–ª—é—á–∞–µ—Ç –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—É—é —Å–µ—Ç–∫—É –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–π –æ—Å–∏ Y
                overlaying='y',
                side='right'
            ),
            legend=dict(x=0.5, xanchor='center', y=-0.2, orientation='h'),  # –õ–µ–≥–µ–Ω–¥–∞ –≤–Ω–∏–∑—É
            plot_bgcolor='white',
            margin=dict(l=50, r=50, t=50, b=50)
        )
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –≤ Streamlit
        st.plotly_chart(fig_deals_calls)


        
        # --- –í—Ç–æ—Ä–æ–π –∞–Ω–∞–ª–∏–∑: –°–≤—è–∑—å –º–µ–∂–¥—É –∑–≤–æ–Ω–∫–∞–º–∏ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ–º —É—Å–ø–µ—à–Ω—ã—Ö —Å–¥–µ–ª–æ–∫ ---
        st.subheader("–°–≤—è–∑—å –º–µ–∂–¥—É –∑–≤–æ–Ω–∫–∞–º–∏ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ–º —É—Å–ø–µ—à–Ω—ã—Ö —Å–¥–µ–ª–æ–∫")
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –∑–≤–æ–Ω–∫–∞—Ö
        calls_data = pd.read_csv("demo_data/Cleaned_Calls.csv")
        
        # –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫ –µ–¥–∏–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É
        calls_data['CONTACTID'] = calls_data['CONTACTID'].astype(str)
        data['Contact Name'] = data['Contact Name'].astype(str)
        
        # –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–æ–≤ —Å –¥–∞—Ç–∞–º–∏ –∫ datetime
        calls_data['Call Start Time'] = pd.to_datetime(calls_data['Call Start Time'])
        data['Created Time'] = pd.to_datetime(data['Created Time'])
        
        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω—ã—Ö —Å–¥–µ–ª–æ–∫
        successful_deals = data[data['Months of study'].notnull()]
        
        # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –∑–≤–æ–Ω–∫–æ–≤ –ø–æ –º–µ—Å—è—Ü–∞–º
        monthly_calls = calls_data.resample('ME', on='Call Start Time').size().reset_index(name='Call Count')
        
        # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —É—Å–ø–µ—à–Ω—ã—Ö —Å–¥–µ–ª–æ–∫ –ø–æ –º–µ—Å—è—Ü–∞–º
        monthly_deals = successful_deals.resample('ME', on='Created Time').size().reset_index(name='Deal Count')

        # –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        monthly_data = pd.merge(
            monthly_calls,
            monthly_deals,
            left_on='Call Start Time',
            right_on='Created Time',
            how='outer'
        ).fillna(0)
        
        # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–æ–≤
        monthly_data.rename(columns={'Call Start Time': 'Date'}, inplace=True)
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—é
        correlation = monthly_data['Call Count'].corr(monthly_data['Deal Count'])
        st.write(f"–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è –º–µ–∂–¥—É –∑–≤–æ–Ω–∫–∞–º–∏ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ–º —É—Å–ø–µ—à–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: {correlation:.2f}")

        fig_deals_calls = go.Figure()
        
        # –õ–∏–Ω–∏—è –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–≤–æ–Ω–∫–æ–≤
        fig_deals_calls.add_trace(
            go.Scatter(
                x=monthly_data['Date'],
                y=monthly_data['Call Count'],
                mode='lines+markers',
                name='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–æ–Ω–∫–æ–≤',
                line=dict(color='mediumorchid'),
                yaxis='y1'  # –°–≤—è–∑—å —Å –ø–µ—Ä–≤–æ–π –æ—Å—å—é
            )
        )
        
        # –õ–∏–Ω–∏—è –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É—Å–ø–µ—à–Ω—ã—Ö —Å–¥–µ–ª–æ–∫
        fig_deals_calls.add_trace(
            go.Scatter(
                x=monthly_data['Date'],
                y=monthly_data['Deal Count'],
                mode="lines+markers+text",  # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
                name='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω—ã—Ö —Å–¥–µ–ª–æ–∫',
                line=dict(color='green'),
                yaxis='y2',  # –°–≤—è–∑—å —Å–æ –≤—Ç–æ—Ä–æ–π –æ—Å—å—é
                text=monthly_data['Deal Count'].round(),  # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (–æ–∫—Ä—É–≥–ª–µ–Ω–æ)
                textposition="top center"  # –†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
            )
        )
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–µ–π
        fig_deals_calls.update_layout(
            # title='–°–≤—è–∑—å –º–µ–∂–¥—É –∑–≤–æ–Ω–∫–∞–º–∏ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ–º —É—Å–ø–µ—à–Ω—ã—Ö —Å–¥–µ–ª–æ–∫',
            xaxis=dict(title='–î–∞—Ç–∞'),
            yaxis=dict(
                title='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–æ–Ω–∫–æ–≤',
                titlefont=dict(color='mediumorchid'),
                tickfont=dict(color='mediumorchid'),
                showgrid=False  # –û—Ç–∫–ª—é—á–∞–µ—Ç –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—É—é —Å–µ—Ç–∫—É –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–π –æ—Å–∏ Y
            ),
            yaxis2=dict(
                title='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω—ã—Ö —Å–¥–µ–ª–æ–∫',
                titlefont=dict(color='green'),
                tickfont=dict(color='green'),
                showgrid=False,  # –û—Ç–∫–ª—é—á–∞–µ—Ç –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—É—é —Å–µ—Ç–∫—É –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–π –æ—Å–∏ Y
                overlaying='y',
                side='right'
            ),
            legend=dict(x=0.5, xanchor='center', y=-0.2, orientation='h'),  # –õ–µ–≥–µ–Ω–¥–∞ –≤–Ω–∏–∑—É
            plot_bgcolor='white',
            margin=dict(l=50, r=50, t=50, b=50)
        )
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –≤ Streamlit
        st.plotly_chart(fig_deals_calls)
       
        
        
        # --- –¢—Ä–µ—Ç–∏–π –∞–Ω–∞–ª–∏–∑: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —É—Å–ø–µ—à–Ω—ã—Ö –∏ –ø–æ—Ç–µ—Ä—è–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫ ---
        st.subheader("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —É—Å–ø–µ—à–Ω—ã—Ö –∏ –ø–æ—Ç–µ—Ä—è–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫")
    
        df3 = data.copy()
        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –¥–∞—Ç—ã –≤ –Ω—É–∂–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        df3['Closing Date'] = pd.to_datetime(df3['Closing Date'], errors='coerce')
        df3['Created Time'] = pd.to_datetime(df3['Created Time'], errors='coerce')
        # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–¥–µ–ª–∫–∏
        df3['Deal Duration'] = (df3['Closing Date'] - df3['Created Time']).dt.days
        
        # –£–¥–∞–ª—è–µ–º –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        df3 = df3[df3['Deal Duration'] >= 0]
        
        # –†–∞–∑–¥–µ–ª—è–µ–º —É—Å–ø–µ—à–Ω—ã–µ –∏ –ø–æ—Ç–µ—Ä—è–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏
        successful_deals = df3[df3['Months of study'].notnull()]['Deal Duration']
        lost_deals = df3[~df3['Months of study'].notnull()]['Deal Duration']
        
        # –†–∞—Å—á–µ—Ç —Å—Ä–µ–¥–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        avg_successful_duration = successful_deals.mean()
        avg_lost_duration = lost_deals.mean()
        overall_avg_duration = df3['Deal Duration'].mean()
    
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        st.write(f"–°—Ä–µ–¥–Ω—è—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —É—Å–ø–µ—à–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: {avg_successful_duration:.2f} –¥–Ω–µ–π")
        st.write(f"–°—Ä–µ–¥–Ω—è—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ—Ç–µ—Ä—è–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: {avg_lost_duration:.2f} –¥–Ω–µ–π")
        st.write(f"–û–±—â–∞—è —Å—Ä–µ–¥–Ω—è—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–¥–µ–ª–æ–∫: {overall_avg_duration:.2f} –¥–Ω–µ–π")
        
        st.write(f"–£—Å–ø–µ—à–Ω—ã–µ —Å–¥–µ–ª–∫–∏ –ø–æ Closing Date: {len(successful_deals)}")
        st.write(f"–ü–æ—Ç–µ—Ä—è–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏ –ø–æ Closing Date: {len(lost_deals)}")
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
        if st.button("–ü–æ–∫–∞–∑–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫"):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö
            if not successful_deals.empty and not lost_deals.empty:
                # –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã
                fig_hist = go.Figure()
        
                fig_hist.add_trace(
                    go.Histogram(
                        x=successful_deals,
                        nbinsx=30,
                        name="–£—Å–ø–µ—à–Ω—ã–µ —Å–¥–µ–ª–∫–∏",
                        histnorm="probability",
                        marker=dict(color="green"),
                        opacity=0.7
                    )
                )
                fig_hist.add_trace(
                    go.Histogram(
                        x=lost_deals,
                        nbinsx=30,
                        name="–ü–æ—Ç–µ—Ä—è–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏",
                        histnorm="probability",
                        marker=dict(color="red"),
                        opacity=0.7
                    )
                )
        
                fig_hist.update_layout(
                    title="–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —É—Å–ø–µ—à–Ω—ã—Ö –∏ –ø–æ—Ç–µ—Ä—è–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫ (–Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–æ)",
                    xaxis_title="–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–¥–µ–ª–∫–∏ (–≤ –¥–Ω—è—Ö)",
                    yaxis_title="–ü–ª–æ—Ç–Ω–æ—Å—Ç—å",
                    barmode="overlay",
                    legend_title="–¢–∏–ø —Å–¥–µ–ª–∫–∏"
                )
        
                # KDE –≥—Ä–∞—Ñ–∏–∫–∏
                kde_fig = ff.create_distplot(
                    [successful_deals, lost_deals],
                    group_labels=["–£—Å–ø–µ—à–Ω—ã–µ —Å–¥–µ–ª–∫–∏", "–ü–æ—Ç–µ—Ä—è–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏"],
                    colors=["green", "red"],
                    show_hist=False
                )
        
                kde_fig.update_layout(
                    title="–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —É—Å–ø–µ—à–Ω—ã—Ö –∏ –ø–æ—Ç–µ—Ä—è–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫ (–≥—Ä–∞—Ñ–∏–∫–∏ –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏)",
                    xaxis_title="–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–¥–µ–ª–∫–∏ (–≤ –¥–Ω—è—Ö)",
                    yaxis_title="–ü–ª–æ—Ç–Ω–æ—Å—Ç—å",
                    legend_title="–¢–∏–ø —Å–¥–µ–ª–∫–∏"
                )
        
                # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤
                st.plotly_chart(fig_hist, use_container_width=True)
                st.plotly_chart(kde_fig, use_container_width=True)
            else:
                st.warning("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤.")  
    
    
    
    
    elif tab_selected == "üìã –ê–Ω–∞–ª–∏–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫–∞–º–ø–∞–Ω–∏–π –∏ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤":
        st.subheader("üìã –ê–Ω–∞–ª–∏–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫–∞–º–ø–∞–Ω–∏–π –∏ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫
        tab1, tab2 = st.tabs(["Advertising Campaigns",
                              "Marketing Sources"])

        # –í–∫–ª–∞–¥–∫–∞ 1:
        with tab1:        
        
            st.subheader("–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π —Å —Ç–æ—á–∫–∏ –∑—Ä–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ª–∏–¥–æ–≤ –∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏")
        
            # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö ---
            df4 = data.dropna(subset=['Campaign', 'Stage'])
            leads_by_campaign = df4.groupby('Campaign')['Id'].count().reset_index(name='Leads')
            successful_deals = df4[df4['Months of study'].notnull()]
            successful_by_campaign = successful_deals.groupby('Campaign')['Id'].count().reset_index(name='Successful Deals')
        
            campaign_performance = pd.merge(leads_by_campaign, successful_by_campaign, on='Campaign', how='left')
            campaign_performance['Successful Deals'] = campaign_performance['Successful Deals'].fillna(0)
            campaign_performance['Conversion Rate (%)'] = (campaign_performance['Successful Deals'] / campaign_performance['Leads']) * 100
            campaign_performance = campaign_performance.sort_values(by=['Leads', 'Conversion Rate (%)'], ascending=False)
            filtered_data = campaign_performance[campaign_performance['Conversion Rate (%)'] >= 2]
        
            # --- –ù–æ–≤—ã–µ —Ä–∞—Å—á–µ—Ç—ã ---
            # –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫ –ø–æ –∫–∞–º–ø–∞–Ω–∏—è–º
            average_processed_deals = campaign_performance['Leads'].mean()
            
            # –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω—ã—Ö —Å–¥–µ–ª–æ–∫ –ø–æ –∫–∞–º–ø–∞–Ω–∏—è–º
            average_successful_deals = campaign_performance['Successful Deals'].mean()
            
            # –°—Ä–µ–¥–Ω–∏–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∫–æ–Ω–≤–µ—Ä—Å–∏–∏ –ø–æ –∫–∞–º–ø–∞–Ω–∏—è–º
            average_conversion_rate = campaign_performance['Conversion Rate (%)'].mean()
            
            # --- –í—ã–≤–æ–¥ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö ---
            st.markdown(f"**–°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫ –ø–æ –∫–∞–º–ø–∞–Ω–∏—è–º:** {average_processed_deals:.2f}")
            st.markdown(f"**–°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω—ã—Ö —Å–¥–µ–ª–æ–∫ –ø–æ –∫–∞–º–ø–∞–Ω–∏—è–º:** {average_successful_deals:.2f}")
            st.markdown(f"**–°—Ä–µ–¥–Ω–∏–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∫–æ–Ω–≤–µ—Ä—Å–∏–∏ –ø–æ –∫–∞–º–ø–∞–Ω–∏—è–º:** {average_conversion_rate:.2f}%")

            
            
            # --- –ü–µ—Ä–≤—ã–π –≥—Ä–∞—Ñ–∏–∫: –õ–∏–¥—ã –∏ —É—Å–ø–µ—à–Ω—ã–µ —Å–¥–µ–ª–∫–∏ ---
            fig1 = make_subplots(specs=[[{"secondary_y": True}]], vertical_spacing=0.2)
        
            # –õ–∏–¥—ã
            fig1.add_trace(
                go.Bar(
                    x=filtered_data['Campaign'],
                    y=filtered_data['Leads'],
                    name="Leads",
                    marker_color="plum",
                ),
                secondary_y=False,
            )
        
            # –£—Å–ø–µ—à–Ω—ã–µ —Å–¥–µ–ª–∫–∏
            fig1.add_trace(
                go.Scatter(
                    x=filtered_data['Campaign'],
                    y=filtered_data['Successful Deals'],
                    name="Successful Deals",
                    mode="lines+markers+text",  # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
                    line=dict(color="cornflowerblue"),
                    marker=dict(size=7),
                    text=filtered_data['Successful Deals'],  # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                    textposition="top center"  # –†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
                ),
                secondary_y=True,
            )
        
            fig1.update_layout(
                title="–õ–∏–¥—ã –∏ —É—Å–ø–µ—à–Ω—ã–µ —Å–¥–µ–ª–∫–∏ –ø–æ –∫–∞–º–ø–∞–Ω–∏—è–º (–ö–æ–Ω–≤–µ—Ä—Å–∏—è > 2%)",
                height=600,
                xaxis=dict(title="–ö–∞–º–ø–∞–Ω–∏–∏", tickangle=45),  # –£–≥–æ–ª –Ω–∞–∫–ª–æ–Ω–∞ –ø–æ–¥–ø–∏—Å–µ–π –æ—Å–∏ X),
                yaxis=dict(title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏–¥–æ–≤", 
                           titlefont=dict(color='mediumorchid'),
                           tickfont=dict(color='mediumorchid'), 
                           showgrid=False,  # –û—Ç–∫–ª—é—á–∞–µ—Ç –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—É—é —Å–µ—Ç–∫—É –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–π –æ—Å–∏ Y
                           zeroline=False,
                           side="left"),
                yaxis2=dict(title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω—ã—Ö —Å–¥–µ–ª–æ–∫", 
                            titlefont=dict(color='royalblue'),
                            tickfont=dict(color='royalblue'),
                            showgrid=False,  # –û—Ç–∫–ª—é—á–∞–µ—Ç –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—É—é —Å–µ—Ç–∫—É –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–π –æ—Å–∏ Y
                            zeroline=False,
                            side="right", 
                            overlaying="y"),
                legend=dict(orientation="h", x=0.5, xanchor="center", y=1.1)
            )
        
            # --- –í—Ç–æ—Ä–æ–π –≥—Ä–∞—Ñ–∏–∫: –õ–∏–¥—ã –∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∫–æ–Ω–≤–µ—Ä—Å–∏–∏ ---
            fig2 = make_subplots(specs=[[{"secondary_y": True}]], vertical_spacing=0.2)
        
            # –õ–∏–¥—ã
            fig2.add_trace(
                go.Bar(
                    x=filtered_data['Campaign'],
                    y=filtered_data['Leads'],
                    name="Leads",
                    marker_color="plum"
                ),
                secondary_y=False,
            )
        
            # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∫–æ–Ω–≤–µ—Ä—Å–∏–∏
            fig2.add_trace(
                go.Scatter(
                    x=filtered_data['Campaign'],
                    y=filtered_data['Conversion Rate (%)'],
                    name="Conversion Rate",
                    mode="lines+markers+text",  # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
                    line=dict(color="mediumseagreen"), # dash="dash"),
                    marker=dict(size=7),
                    text=filtered_data['Conversion Rate (%)'].round(),  # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (–æ–∫—Ä—É–≥–ª–µ–Ω–æ)
                    textposition="top center"  # –†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
                ),
                secondary_y=True,
            )
        
            fig2.update_layout(
                title="–õ–∏–¥—ã –∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∫–æ–Ω–≤–µ—Ä—Å–∏–∏ –ø–æ –∫–∞–º–ø–∞–Ω–∏—è–º (–ö–æ–Ω–≤–µ—Ä—Å–∏—è > 2%)",
                height=600,
                xaxis=dict(title="–ö–∞–º–ø–∞–Ω–∏–∏", tickangle=45),  # –£–≥–æ–ª –Ω–∞–∫–ª–æ–Ω–∞ –ø–æ–¥–ø–∏—Å–µ–π –æ—Å–∏ X),
                yaxis=dict(title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏–¥–æ–≤",
                           titlefont=dict(color='mediumorchid'),
                           tickfont=dict(color='mediumorchid'),
                           showgrid=False,  # –û—Ç–∫–ª—é—á–∞–µ—Ç –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—É—é —Å–µ—Ç–∫—É –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–π –æ—Å–∏ Y
                           zeroline=False,
                           side="left"),
                yaxis2=dict(title="–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∫–æ–Ω–≤–µ—Ä—Å–∏–∏ (%)", 
                            titlefont=dict(color='green'),
                            tickfont=dict(color='green'),
                            showgrid=False,  # –û—Ç–∫–ª—é—á–∞–µ—Ç –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—É—é —Å–µ—Ç–∫—É –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–π –æ—Å–∏ Y
                            zeroline=False,
                            side="right", 
                            overlaying="y"),
                legend=dict(orientation="h", x=0.5, xanchor="center", y=1.1)
            )
        
            # --- –í—ã–≤–æ–¥ –≥—Ä–∞—Ñ–∏–∫–æ–≤ ---
            st.plotly_chart(fig1, use_container_width=True)
            st.plotly_chart(fig2, use_container_width=True)

        # –í–∫–ª–∞–¥–∫–∞ 2:
        with tab2: 
            st.subheader("–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ (Source) –≤ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ª–∏–¥–æ–≤")
            
            # –ö–æ–ø–∏—Ä—É–µ–º DataFrame deals –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π df
            df5 = data.copy()
            
            # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫
            df5['Target Quality'] = df5['Quality'].map({
                'A - High': 'High',
                'B - Medium': 'Medium',
                'C - Low': 'Non-Target',
                'D - Non Target': 'Non-Target',
                'E - Non Qualified': 'Non-Target',
                'F': 'Non-Target'
            })
            
            # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫ –ø–æ –∫–∞–∂–¥–æ–º—É –∏—Å—Ç–æ—á–Ω–∏–∫—É
            source_total = df5['Source'].value_counts()
            
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ High –∏ Medium —Å–¥–µ–ª–æ–∫ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
            high_deals = df5[df5['Target Quality'] == 'High']['Source'].value_counts()
            medium_deals = df5[df5['Target Quality'] == 'Medium']['Source'].value_counts()
            
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫—Ä—ã—Ç—ã—Ö —Å–¥–µ–ª–æ–∫ (Payment Done) –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
            closed_won = df5[df5['Months of study'].notnull()]['Source'].value_counts()
            
            # –†–∞—Å—á—ë—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤
            high_percent = (high_deals / source_total) * 100
            medium_percent = (medium_deals / source_total) * 100
            conversion_rate = (closed_won / source_total) * 100
            
            # –ò—Ç–æ–≥–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞
            result = pd.DataFrame({
                'Total Deals': source_total,
                'High Deals': high_deals,
                'Medium Deals': medium_deals,
                'High Percent (%)': high_percent,
                'Medium Percent (%)': medium_percent,
                'Payment Done Deals': closed_won,
                'Conversion Rate (%)': conversion_rate
            }).fillna(0)
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏
            result = result.sort_values(by=['Conversion Rate (%)'], ascending=False)
            
            # --- –ü–µ—Ä–≤—ã–π –≥—Ä–∞—Ñ–∏–∫: –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∫–æ–Ω–≤–µ—Ä—Å–∏–∏ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º ---
            fig1 = go.Figure()
            
            fig1.add_trace(
                go.Bar(
                    x=result.index,
                    y=result['Conversion Rate (%)'],
                    name='–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∫–æ–Ω–≤–µ—Ä—Å–∏–∏ (%)',
                    marker=dict(color='royalblue'),
                    text=result['Conversion Rate (%)'].round(2),  # –ó–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    textposition='outside'  # –†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
                )
            )
            
            fig1.update_layout(
                title="–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∫–æ–Ω–≤–µ—Ä—Å–∏–∏ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º (Conversion Rate by Source)",
                xaxis=dict(title="–ò—Å—Ç–æ—á–Ω–∏–∫", tickangle=45),
                yaxis=dict(title="–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∫–æ–Ω–≤–µ—Ä—Å–∏–∏ (%)"),
                height=500,
                showlegend=False
            )
            
            # --- –í—Ç–æ—Ä–æ–π –≥—Ä–∞—Ñ–∏–∫: –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ª–∏–¥–æ–≤ ---
            fig2 = go.Figure()
            
            fig2.add_trace(
                go.Bar(
                    x=result.index,
                    y=result['High Percent (%)'],
                    name='–ü—Ä–æ—Ü–µ–Ω—Ç High (%)',
                    marker=dict(color='green'),
                    text=result['High Percent (%)'].round(2),  # –ó–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    textposition='outside'
                )
            )
            
            fig2.add_trace(
                go.Bar(
                    x=result.index,
                    y=result['Medium Percent (%)'],
                    name='–ü—Ä–æ—Ü–µ–Ω—Ç Medium (%)',
                    marker=dict(color='orange'),
                    text=result['Medium Percent (%)'].round(2),  # –ó–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    textposition='outside'
                )
            )
            
            fig2.update_layout(
                title="–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ª–∏–¥–æ–≤",
                xaxis=dict(title="–ò—Å—Ç–æ—á–Ω–∏–∫", tickangle=45),
                yaxis=dict(title="–ü—Ä–æ—Ü–µ–Ω—Ç"),
                height=500,
                barmode="stack",
                showlegend=True,
                legend=dict(orientation="v", x=1, xanchor="right", y=1)
            )
            
            # –í—ã–≤–æ–¥–∏–º –≥—Ä–∞—Ñ–∏–∫–∏ –ø–æ –æ—á–µ—Ä–µ–¥–∏
            st.plotly_chart(fig1, use_container_width=True)
            st.plotly_chart(fig2, use_container_width=True)



    # --- –ê–Ω–∞–ª–∏–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ —Å–¥–µ–ª–æ–∫ ---
    elif tab_selected == "üíº –ê–Ω–∞–ª–∏–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç—ã –æ—Ç–¥–µ–ª–∞ –ø—Ä–æ–¥–∞–∂":
        st.subheader("üíº –ê–Ω–∞–ª–∏–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç—ã –æ—Ç–¥–µ–ª–∞ –ø—Ä–æ–¥–∞–∂")

        # –°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫
        tab1, tab2 = st.tabs(["Deal Owners",
                              "Advertising Campaigns"])

        # –í–∫–ª–∞–¥–∫–∞ 1:
        with tab1:        

            st.subheader("–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ —Å–¥–µ–ª–æ–∫ —Å —Ç–æ—á–∫–∏ –∑—Ä–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫, –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏ –∏ –æ–±—â–µ–π —Å—É–º–º—ã –ø—Ä–æ–¥–∞–∂")
        
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            owners_total_deals = data['Deal Owner Name'].value_counts()
            owners_closed_won = data[data['Months of study'].notnull()]['Deal Owner Name'].value_counts()
            owners_conversion_rate = (owners_closed_won / owners_total_deals) * 100
            owners_total_sales = data[data['Months of study'].notnull()].groupby('Deal Owner Name')['Initial Amount Paid'].sum()
            
            owners_result = pd.DataFrame({
                'Total Deals': owners_total_deals,
                'Closed Deals': owners_closed_won,
                'Conversion Rate (%)': owners_conversion_rate,
                'Total Sales Amount': owners_total_sales
            }).fillna(0).sort_values(by='Total Sales Amount', ascending=False)
            
            # –°—Ä–µ–¥–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
            avg_conversion_rate = owners_conversion_rate.mean()
            avg_total_deals = owners_total_deals.mean()
            
            st.write(f"–°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: {avg_total_deals:.2f}")
            st.write(f"–°—Ä–µ–¥–Ω–∏–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∫–æ–Ω–≤–µ—Ä—Å–∏–∏: {avg_conversion_rate:.2f}%")
            
            # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ —Å –ø—Ä–æ–¥–∞–∂–∞–º–∏
            owners_with_sales = owners_result[owners_result['Closed Deals'] > 0]
            
            # --- –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤ ---
            # –ì—Ä–∞—Ñ–∏–∫ 1: –ó–∞–∫—Ä—ã—Ç—ã–µ —Å–¥–µ–ª–∫–∏ –∏ –æ–±—â–∞—è —Å—É–º–º–∞ –ø—Ä–æ–¥–∞–∂
            fig1 = make_subplots(specs=[[{"secondary_y": True}]])
            
            fig1.add_trace(
                go.Bar(
                    x=owners_with_sales.index,
                    y=owners_with_sales['Closed Deals'],
                    name='Closed Deals',
                    marker_color='skyblue',
                    text=owners_with_sales['Closed Deals'],
                    textposition='inside'
                ),
                secondary_y=False,
            )
            
            fig1.add_trace(
                go.Scatter(
                    x=owners_with_sales.index,
                    y=owners_with_sales['Total Sales Amount'],
                    name='Total Sales Amount',
                    mode='lines+markers',
                    line=dict(color='purple'),
                    marker=dict(size=7)
                ),
                secondary_y=True,
            )
            
            fig1.update_layout(
                title='Effectiveness of Deal Owners: Sales & Closed Deals',
                xaxis_title='Deal Owner Name',
                yaxis=dict(
                    title='Closed Deals (Count)',
                    titlefont=dict(color='steelblue'),
                    tickfont=dict(color='steelblue'),
                    zeroline=False,
                    showgrid=False
                ),
                yaxis2=dict(
                    title='Total Sales Amount',
                    titlefont=dict(color='purple'),
                    tickfont=dict(color='purple'),
                    overlaying='y',
                    side='right',
                    zeroline=False,
                    showgrid=False
                ),
                legend=dict(x=0.5, xanchor='center', y=1.1, orientation="h"),
                template='plotly_white'
            )
            
            st.plotly_chart(fig1, use_container_width=True)
            
            # –ì—Ä–∞—Ñ–∏–∫ 2: –ó–∞–∫—Ä—ã—Ç—ã–µ —Å–¥–µ–ª–∫–∏ –∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∫–æ–Ω–≤–µ—Ä—Å–∏–∏
            fig2 = make_subplots(specs=[[{"secondary_y": True}]])
            
            fig2.add_trace(
                go.Bar(
                    x=owners_with_sales.index,
                    y=owners_with_sales['Closed Deals'],
                    name='Closed Deals',
                    marker_color='skyblue',
                    text=owners_with_sales['Closed Deals'],
                    textposition='inside'
                ),
                secondary_y=False,
            )
            
            fig2.add_trace(
                go.Scatter(
                    x=owners_with_sales.index,
                    y=owners_with_sales['Conversion Rate (%)'],
                    name='Conversion Rate',
                    mode='lines+markers',
                    line=dict(color='green', dash='dash'),
                    marker=dict(size=7)
                ),
                secondary_y=True,
            )
            
            fig2.update_layout(
                title='Effectiveness of Deal Owners: Conversion Rate & Closed Deals',
                xaxis_title='Deal Owner Name',
                yaxis=dict(
                    title='Closed Deals (Count)',
                    titlefont=dict(color='steelblue'),
                    tickfont=dict(color='steelblue'),
                    zeroline=False,
                    showgrid=False
                ),
                yaxis2=dict(
                    title='Conversion Rate (%)',
                    titlefont=dict(color='green'),
                    tickfont=dict(color='green'),
                    overlaying='y',
                    side='right',
                    zeroline=False,
                    showgrid=False
                ),
                legend=dict(x=0.5, xanchor='center', y=1.1, orientation="h"),
                template='plotly_white'
            )
            
            st.plotly_chart(fig2, use_container_width=True)



        # –í–∫–ª–∞–¥–∫–∞ 2:
        with tab2:        

            st.subheader("–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π —Å —Ç–æ—á–∫–∏ –∑—Ä–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫, –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏ –∏ –æ–±—â–µ–π —Å—É–º–º—ã –ø—Ä–æ–¥–∞–∂")
            # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π
            campaign_total_deals = data['Campaign'].value_counts()
            campaign_closed_won = data[data['Months of study'].notnull()]['Campaign'].value_counts()
            campaign_conversion_rate = (campaign_closed_won / campaign_total_deals) * 100
            campaign_total_sales = data[data['Months of study'].notnull()].groupby('Campaign')['Initial Amount Paid'].sum()
            
            campaign_result = pd.DataFrame({
                'Total Deals': campaign_total_deals,
                'Closed Deals (Payment Done)': campaign_closed_won,
                'Conversion Rate (%)': campaign_conversion_rate,
                'Total Sales Amount': campaign_total_sales
            }).fillna(0).sort_values(by='Total Sales Amount', ascending=False)
            
            campaigns_with_sales = campaign_result[campaign_result['Closed Deals (Payment Done)'] > 0]
            
            # --- –ü–µ—Ä–≤—ã–π –≥—Ä–∞—Ñ–∏–∫: –ó–∞–∫—Ä—ã—Ç—ã–µ —Å–¥–µ–ª–∫–∏ –∏ Total Sales Amount ---
            fig1 = make_subplots(specs=[[{"secondary_y": True}]])
            
            # –ó–∞–∫—Ä—ã—Ç—ã–µ —Å–¥–µ–ª–∫–∏
            fig1.add_trace(
                go.Bar(
                    x=campaigns_with_sales.index,
                    y=campaigns_with_sales['Closed Deals (Payment Done)'],
                    name='Closed Deals',
                    marker_color='skyblue',
                    text=campaigns_with_sales['Closed Deals (Payment Done)'],  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–µ—Ç–æ–∫
                    textposition='inside'  # –ü–æ–∑–∏—Ü–∏—è –º–µ—Ç–æ–∫
                ),
                secondary_y=False,
            )
            
            # Total Sales Amount
            fig1.add_trace(
                go.Scatter(
                    x=campaigns_with_sales.index,
                    y=campaigns_with_sales['Total Sales Amount'],
                    name='Total Sales Amount',
                    mode='lines+markers',
                    line=dict(color='purple'),
                    # text=campaigns_with_sales['Total Sales Amount'],  # –ó–Ω–∞—á–µ–Ω–∏—è –º–µ—Ç–æ–∫
                    # textposition='top center'  # –ü–æ–∑–∏—Ü–∏—è —Ç–µ–∫—Å—Ç–∞
                ),
                secondary_y=True,
            )
            
            fig1.update_layout(
                title='Effectiveness of Campaigns: Sales & Closed Deals',
                height=500,
                xaxis_title='Campaign',
                xaxis=dict(tickangle=45),  # –£–≥–æ–ª –Ω–∞–∫–ª–æ–Ω–∞ –ø–æ–¥–ø–∏—Å–µ–π –æ—Å–∏ X
                yaxis=dict(
                    title='Closed Deals (Count)',
                    titlefont=dict(color='steelblue'),
                    tickfont=dict(color='steelblue'),
                    zeroline=False,
                    showgrid=False  # –û—Ç–∫–ª—é—á–∞–µ—Ç –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—É—é —Å–µ—Ç–∫—É –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–π –æ—Å–∏ Y
                ),
                yaxis2=dict(
                    title='Total Sales Amount',
                    titlefont=dict(color='purple'),
                    tickfont=dict(color='purple'),
                    side='right',
                    overlaying='y',
                    zeroline=False,
                    showgrid=False  # –û—Ç–∫–ª—é—á–∞–µ—Ç –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—É—é —Å–µ—Ç–∫—É –¥–ª—è –≤—Ç–æ—Ä–æ–π –æ—Å–∏ Y
                ),
                legend=dict(x=0.5, xanchor='center', y=1.1, orientation="h"),
                template='plotly_white'
            )
            
            # --- –í—Ç–æ—Ä–æ–π –≥—Ä–∞—Ñ–∏–∫: –ó–∞–∫—Ä—ã—Ç—ã–µ —Å–¥–µ–ª–∫–∏ –∏ Conversion Rate ---
            fig2 = make_subplots(specs=[[{"secondary_y": True}]])
            
            # –ó–∞–∫—Ä—ã—Ç—ã–µ —Å–¥–µ–ª–∫–∏
            fig2.add_trace(
                go.Bar(
                    x=campaigns_with_sales.index,
                    y=campaigns_with_sales['Closed Deals (Payment Done)'],
                    name='Closed Deals',
                    marker_color='skyblue',
                    text=campaigns_with_sales['Closed Deals (Payment Done)'],  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–µ—Ç–æ–∫
                    textposition='inside'  # –ü–æ–∑–∏—Ü–∏—è –º–µ—Ç–æ–∫
                ),
                secondary_y=False,
            )
            
            # Conversion Rate
            fig2.add_trace(
                go.Scatter(
                    x=campaigns_with_sales.index,
                    y=campaigns_with_sales['Conversion Rate (%)'],
                    name='Conversion Rate',
                    mode='lines+markers',
                    line=dict(color='green') #  dash='dash'
                    # text=campaigns_with_sales['Conversion Rate (%)'],  # –ó–Ω–∞—á–µ–Ω–∏—è –º–µ—Ç–æ–∫
                    # textposition='top center'  # –ü–æ–∑–∏—Ü–∏—è —Ç–µ–∫—Å—Ç–∞
                ),
                secondary_y=True,
            )
            
            fig2.update_layout(
                title='Effectiveness of Campaigns: Conversion Rate & Closed Deals',
                height=500,
                xaxis_title='Campaign',
                xaxis=dict(tickangle=45),  # –£–≥–æ–ª –Ω–∞–∫–ª–æ–Ω–∞ –ø–æ–¥–ø–∏—Å–µ–π –æ—Å–∏ X
                yaxis=dict(
                    title='Closed Deals (Count)',
                    titlefont=dict(color='steelblue'),
                    tickfont=dict(color='steelblue'),
                    zeroline=False,
                    showgrid=False  # –û—Ç–∫–ª—é—á–∞–µ—Ç –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—É—é —Å–µ—Ç–∫—É –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–π –æ—Å–∏ Y
                ),
                yaxis2=dict(
                    title='Conversion Rate (%)',
                    titlefont=dict(color='green'),
                    tickfont=dict(color='green'),
                    side='right',
                    overlaying='y',
                    zeroline=False,
                    showgrid=False  # –û—Ç–∫–ª—é—á–∞–µ—Ç –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—É—é —Å–µ—Ç–∫—É –¥–ª—è –≤—Ç–æ—Ä–æ–π –æ—Å–∏ Y
                ),
                legend=dict(x=0.5, xanchor='center', y=1.1, orientation="h"),
                template='plotly_white'
            )
    
            st.plotly_chart(fig1, use_container_width=True)
            st.plotly_chart(fig2, use_container_width=True)





    elif tab_selected == "üí∞ –ê–Ω–∞–ª–∏–∑ –ø–ª–∞—Ç–µ–∂–µ–π –∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤":
        st.subheader("üí∞ –ê–Ω–∞–ª–∏–∑ –ø–ª–∞—Ç–µ–∂–µ–π –∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫
        tab1, tab2, tab3 = st.tabs(["Payment Types", 
                                    "Top Products",
                                    "Education Type"])

        # –í–∫–ª–∞–¥–∫–∞ 1: 
        with tab1:
        
            st.subheader("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –æ–ø–ª–∞—Ç—ã –∏ –∏—Ö –≤–ª–∏—è–Ω–∏–µ –Ω–∞ —É—Å–ø–µ—à–Ω–æ—Å—Ç—å —Å–¥–µ–ª–æ–∫")
            # –ö–æ–ø–∏—Ä—É–µ–º DataFrame deals –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π df
            df = data.copy()
            
            # –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ —Å–¥–µ–ª–æ–∫
            df['is_successful'] = (df['Months of study'].notnull()).astype(int)
            
            # --- –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω—ã—Ö —Å–¥–µ–ª–æ–∫ ---
            detailed_summary = df.groupby('Payment Type').agg(
                total_deals=('is_successful', 'size'),
                successful_deals=('is_successful', 'sum'),
                avg_initial_payment=('Initial Amount Paid', 'mean'),
                avg_offer_amount=('Offer Total Amount', 'mean'),
                avg_study_months=('Months of study', 'mean')
            ).round(2)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∫–æ–Ω–≤–µ—Ä—Å–∏–∏
            detailed_summary['conversion_rate'] = (detailed_summary['successful_deals'] / detailed_summary['total_deals']).round(2)

            # --- –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏ ---
            detailed_fig = make_subplots(specs=[[{"secondary_y": True}]])
            # --- –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è ---
            table_fig2 = go.Figure(data=[
                go.Table(
                    header=dict(
                        values=['Payment Type', 'Total Deals', 'Successful Deals', 'Conversion Rate',
                                'Average Initial Amount Paid', 'Average Offer Total Amount', 'Average Months of study'],
                        fill_color='lightgrey',
                        align='center'
                    ),
                    cells=dict(
                        values=[detailed_summary.index, detailed_summary['total_deals'], detailed_summary['successful_deals'],
                                detailed_summary['conversion_rate'], detailed_summary['avg_initial_payment'], 
                                detailed_summary['avg_offer_amount'], detailed_summary['avg_study_months']],
                        fill_color='white',
                        align='center',
                        height=30,  # –î–æ–±–∞–≤–ª—è–µ–º –≤—ã—Å–æ—Ç—É —è—á–µ–π–∫–∏
                    )
                )
            ])

            table_fig2.update_layout(
                height=200,  # –û–±—â–∞—è –≤—ã—Å–æ—Ç–∞ —Ç–∞–±–ª–∏—Ü—ã
                margin=dict(l=5, r=5, t=5, b=5)
            )
            st.plotly_chart(table_fig2, use_container_width=True)
            
            
            
            # --- –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ —É—Å–ø–µ—à–Ω—ã—Ö —Å–¥–µ–ª–æ–∫ ---
            bar_fig = px.bar(
                detailed_summary.reset_index(),
                x='Payment Type',
                y='successful_deals',
                title='Successful Deals by Payment Type',
                labels={'successful_deals': 'Successful Deals', 'Payment Type': 'Payment Type'},
                text='successful_deals'
            )
            bar_fig.update_traces(texttemplate='%{text}', textposition='outside', marker_color=px.colors.qualitative.Plotly)
            bar_fig.update_layout(
                yaxis=dict(title='Successful Deals'),
                xaxis=dict(title='Payment Type')
            )
            
            # --- –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏ ---
            bar_fig2 = px.bar(
                detailed_summary.reset_index(),
                x='Payment Type',
                y='conversion_rate',
                title='Conversion Rate by Payment Type',
                labels={'conversion_rate': 'Conversion Rate', 'Payment Type': 'Payment Type'},
                text='conversion_rate',
            )
            bar_fig2.update_traces(texttemplate='%{text:.2f}', textposition='outside', marker_color=px.colors.qualitative.Plotly)
            bar_fig2.update_layout(
                yaxis=dict(title='Conversion Rate', range=[0, 1]),
                xaxis=dict(title='Payment Type')
            )


            
            col1, col2 = st.columns([1, 1])
            with col1:
                st.plotly_chart(bar_fig, use_container_width=True)
            with col2:
                st.plotly_chart(bar_fig2, use_container_width=True)
                
    
            # --- –ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–¥–µ–ª–∫–∏ ---
            df['creation_to_closing_days'] = (pd.to_datetime(df['Closing Date']) - pd.to_datetime(df['Created Time'])).dt.days
            time_analysis = df.groupby('Payment Type').agg(
                avg_days_to_close=('creation_to_closing_days', 'mean'),
                median_days_to_close=('creation_to_closing_days', 'median')
            ).round(2)
            
            # --- –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ –¥–æ –∑–∞–∫—Ä—ã—Ç–∏—è ---
            time_fig = go.Figure()
            time_fig.add_trace(go.Bar(
                x=time_analysis.index,
                y=time_analysis['avg_days_to_close'],
                name='Average Days to Close',
                marker_color='orange',
                text=time_analysis['avg_days_to_close'],
            ))
            time_fig.add_trace(go.Bar(
                x=time_analysis.index,
                y=time_analysis['median_days_to_close'],
                name='Median Days to Close',
                marker_color='blue',
                text=time_analysis['median_days_to_close'],
            ))
            time_fig.update_layout(
                barmode='group',
                title='Average and Median Days to Close Deals by Payment Type',
                xaxis=dict(title='Payment Type'),
                yaxis=dict(title='Days'),
                legend=dict(x=0.2, xanchor='center', y=1),
            )
    
            st.plotly_chart(time_fig, use_container_width=True)
    
    
            
            # –°—Ä–µ–¥–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∏
            detailed_fig.add_trace(
                go.Bar(
                    x=detailed_summary.index,
                    y=detailed_summary['avg_initial_payment'],
                    name='Avg Initial Payment',
                    marker_color='blue',
                    text=detailed_summary['avg_initial_payment'],
                    textposition='inside',  # –ü–æ–∑–∏—Ü–∏—è –º–µ—Ç–æ–∫
                    opacity=0.6
                ),
                secondary_y=False
            )
            
            # –°—Ä–µ–¥–Ω—è—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è
            detailed_fig.add_trace(
                go.Scatter(
                    x=detailed_summary.index,
                    y=detailed_summary['avg_study_months'],
                    name='Avg Study Months',
                    mode='lines+markers+text',
                    line=dict(color='orange', width=2),
                    text=detailed_summary['avg_study_months'],
                    textposition='top center',
                    textfont=dict(color='orange')  # –¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞
                ),
                secondary_y=True
            )
            
            detailed_fig.update_layout(
                title='Initial Payment and Study Months by Payment Type',
                xaxis=dict(title='Payment Type'),
                yaxis=dict(
                    title='Initial Payment',
                    titlefont=dict(color='royalblue'),
                    tickfont=dict(color='royalblue'),
                    zeroline=False,
                    showgrid=False
                ),
                yaxis2=dict(
                    title='Months of Study',
                    overlaying='y', 
                    side='right',
                    titlefont=dict(color='orange'),
                    tickfont=dict(color='orange'),
                    zeroline=False,
                    showgrid=False  
                ),
                legend=dict(x=0.8, xanchor='center', y=1),
                template='plotly_white'
            )
    
            st.plotly_chart(detailed_fig, use_container_width=True)

            


        
        # –í–∫–ª–∞–¥–∫–∞ 2: 
        with tab2:
            st.subheader("–ê–Ω–∞–ª–∏–∑ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏ –∏ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤")
        
            # –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ —Å–¥–µ–ª–æ–∫
            df['is_successful'] = (df['Months of study'].notnull()).astype(int)
            
            # –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∞–º
            product_success = df.groupby('Product').agg(
                total_deals=('is_successful', 'size'),
                successful_deals=('is_successful', 'sum')
            )
            product_success['conversion_rate'] = (product_success['successful_deals'] / product_success['total_deals']).round(2)
            product_success = product_success.sort_values(by='total_deals', ascending=False).reset_index()
            
            # –¢–∞–±–ª–∏—Ü–∞ 1: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∞–º
            product_table = go.Figure(data=[go.Table(
                header=dict(
                    values=['<b>Product</b>', '<b>Total Deals</b>', '<b>Successful Deals</b>', '<b>Conversion Rate</b>'],
                    fill_color='lightgrey',
                    align='left',
                    height=30  # –í—ã—Å–æ—Ç–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞
                ),
                cells=dict(
                    values=[
                        product_success['Product'],
                        product_success['total_deals'],
                        product_success['successful_deals'],
                        product_success['conversion_rate']
                    ],
                    fill_color='white',
                    align='left',
                    height=25  # –í—ã—Å–æ—Ç–∞ —Å—Ç—Ä–æ–∫
                )
            )])
            product_table.update_layout(
                height=200,  # –û–±—â–∞—è –≤—ã—Å–æ—Ç–∞ —Ç–∞–±–ª–∏—Ü—ã
                margin=dict(l=5, r=5, t=5, b=5)
            )
            st.plotly_chart(product_table, use_container_width=True)

            # –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–æ–ø-10 –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤
            product_popularity = product_success[['Product', 'total_deals']].sort_values(
                by='total_deals', ascending=False
            )
            
            # –ì—Ä–∞—Ñ–∏–∫ 1: –¢–æ–ø-10 –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤
            popularity_fig = go.Figure(data=[
                go.Bar(
                    x=product_popularity['Product'],
                    y=product_popularity['total_deals'],
                    marker=dict(color='skyblue'),
                    text=product_popularity['total_deals'],
                    textposition="inside"
                )
            ])
            popularity_fig.update_layout(
                title='Top Most Popular Products',
                xaxis=dict(title='Product', tickangle=45),
                yaxis=dict(title='Number of Deals'),
                # margin=dict(l=10, r=10, t=40, b=10),
                height=400
            )
            
            # –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–æ–ø-10 –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø–æ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏
            top_conversion = product_success.sort_values(by='conversion_rate', ascending=False)
            
            # –ì—Ä–∞—Ñ–∏–∫ 2: –¢–æ–ø-10 –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø–æ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏
            conversion_fig = go.Figure(data=[
                go.Bar(
                    x=top_conversion['Product'],
                    y=top_conversion['conversion_rate'],
                    marker=dict(color='orange'),
                    text=top_conversion['conversion_rate'],
                    textposition="inside"
                )
            ])
            conversion_fig.update_layout(
                title='Top Products by Conversion Rate',
                xaxis=dict(title='Product', tickangle=45),
                yaxis=dict(title='Conversion Rate'),
                # margin=dict(l=10, r=10, t=40, b=10),
                height=400
            )
            
          
            col1, col2 = st.columns(2)
            with col1:
                st.plotly_chart(popularity_fig, use_container_width=True)
            with col2:
                st.plotly_chart(conversion_fig, use_container_width=True)

        with tab3:
            st.subheader("–ê–Ω–∞–ª–∏–∑ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏ –∏ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ —Ç–∏–ø–æ–≤ –æ–±—É—á–µ–Ω–∏—è")

            # –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –ø–æ —Ç–∏–ø–∞–º –æ–±—É—á–µ–Ω–∏—è
            education_type_success = df.groupby('Education Type').agg(
                total_deals=('is_successful', 'size'),
                successful_deals=('is_successful', 'sum')
            )
            education_type_success['conversion_rate'] = (education_type_success['successful_deals'] / education_type_success['total_deals']).round(2)
            education_type_success = education_type_success.sort_values(by='total_deals', ascending=False).reset_index()
            
            # –¢–∞–±–ª–∏—Ü–∞ 2: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –ø–æ —Ç–∏–ø–∞–º –æ–±—É—á–µ–Ω–∏—è
            education_type_table = go.Figure(data=[go.Table(
                header=dict(
                    values=['<b>Education Type</b>', '<b>Total Deals</b>', '<b>Successful Deals</b>', '<b>Conversion Rate</b>'],
                    fill_color='lightgrey',
                    align='left',
                    height=30
                ),
                cells=dict(
                    values=[
                        education_type_success['Education Type'],
                        education_type_success['total_deals'],
                        education_type_success['successful_deals'],
                        education_type_success['conversion_rate']
                    ],
                    fill_color='white',
                    align='left',
                    height=25
                )
            )])
            education_type_table.update_layout(
                height=100,  # –û–±—â–∞—è –≤—ã—Å–æ—Ç–∞ —Ç–∞–±–ª–∏—Ü—ã
                margin=dict(l=5, r=5, t=5, b=5)
            )
            
            st.plotly_chart(education_type_table, use_container_width=True)

            # –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–æ–ø-10 –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ–±—É—á–µ–Ω–∏—è
            education_type_popularity = education_type_success[['Education Type', 'total_deals']].sort_values(
                by='total_deals', ascending=False
            ).head(10)
            
            # –ì—Ä–∞—Ñ–∏–∫ 1: –¢–æ–ø-10 –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ–±—É—á–µ–Ω–∏—è
            education_popularity_fig = go.Figure(data=[
                go.Bar(
                    x=education_type_popularity['Education Type'],
                    y=education_type_popularity['total_deals'],
                    marker=dict(color='lightgreen'),
                    text=education_type_popularity['total_deals'],
                    textposition="inside"
                )
            ])
            education_popularity_fig.update_layout(
                title='Top 10 Most Popular Education Types',
                xaxis=dict(title='Education Type'),
                yaxis=dict(title='Number of Deals'),
                # margin=dict(l=10, r=10, t=40, b=10),
                height=400
            )
            
            # –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–æ–ø-10 —Ç–∏–ø–æ–≤ –æ–±—É—á–µ–Ω–∏—è –ø–æ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏
            top_education_conversion = education_type_success.sort_values(by='conversion_rate', ascending=False).head(10)
            
            # –ì—Ä–∞—Ñ–∏–∫ 2: –¢–æ–ø-10 —Ç–∏–ø–æ–≤ –æ–±—É—á–µ–Ω–∏—è –ø–æ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏
            education_conversion_fig = go.Figure(data=[
                go.Bar(
                    x=top_education_conversion['Education Type'],
                    y=top_education_conversion['conversion_rate'],
                    marker=dict(color='purple'),
                    text=top_education_conversion['conversion_rate'],
                    textposition="inside"
                )
            ])
            education_conversion_fig.update_layout(
                title='Top 10 Education Types by Conversion Rate',
                xaxis=dict(title='Education Type'),
                yaxis=dict(title='Conversion Rate'),
                # margin=dict(l=10, r=10, t=40, b=10),
                height=400
            )
            
            col1, col2 = st.columns(2)
            with col1:
                st.plotly_chart(education_popularity_fig, use_container_width=True)
            with col2:
                st.plotly_chart(education_conversion_fig, use_container_width=True)

            product_education_analysis = df.groupby(['Product', 'Education Type']).agg(
                total_deals=('is_successful', 'size'),
                successful_deals=('is_successful', 'sum')
            )
            product_education_analysis["conversion_rate"] = (
                product_education_analysis["successful_deals"]
                / product_education_analysis["total_deals"]
            ).round(2)
            
            # –°–±—Ä–æ—Å –∏–Ω–¥–µ–∫—Å–∞ –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
            product_education_analysis = product_education_analysis.reset_index()
            
            
            # –°–æ–∑–¥–∞–Ω–∏–µ —Å–≤–æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è —Ç–µ–ø–ª–æ–≤–æ–π –∫–∞—Ä—Ç—ã
            pivot_table = product_education_analysis.pivot(
                index='Product', 
                columns='Education Type', 
                values='conversion_rate'
            )
            
            # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —è—Ä–∫–æ—Å—Ç–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ü–≤–µ—Ç–∞ —Ç–µ–∫—Å—Ç–∞
            def calculate_text_color(value, zmin, zmax):
                normalized = (value - zmin) / (zmax - zmin)
                return 'white' if normalized < 0.5 else 'black'
            
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            z_values = pivot_table.values
            x_labels = pivot_table.columns
            y_labels = pivot_table.index
            
            # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏
            zmin, zmax = np.nanmin(z_values), np.nanmax(z_values)
            
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π
            annotations = []
            for i, y_label in enumerate(y_labels):
                for j, x_label in enumerate(x_labels):
                    value = z_values[i][j]
                    color = calculate_text_color(value, zmin, zmax)
                    annotations.append(
                        dict(
                            x=x_label,
                            y=y_label,
                            text=str(round(value, 2)) if not np.isnan(value) else '',
                            showarrow=False,
                            font=dict(color=color, size=12),
                        )
                    )
            
            # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ç–µ–ø–ª–æ–≤–æ–π –∫–∞—Ä—Ç—ã
            heatmap_fig = go.Figure(data=go.Heatmap(
                z=z_values,
                x=x_labels,
                y=y_labels,
                colorscale='Viridis',
                colorbar=dict(title='Conversion Rate'),
            ))
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π
            heatmap_fig.update_layout(annotations=annotations)
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è
            heatmap_fig.update_layout(
                title='Conversion Rate by Product and Education Type',
                xaxis=dict(title='Education Type'),
                yaxis=dict(title='Product'),
                # margin=dict(l=10, r=10, t=40, b=10),
                height=500
            )
            
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–ø–ª–æ–≤–æ–π –∫–∞—Ä—Ç—ã –≤ Streamlit
            st.subheader("–ê–Ω–∞–ª–∏–∑ —Ç–µ–ø–ª–æ–≤–æ–π –∫–∞—Ä—Ç—ã")
            
            st.plotly_chart(heatmap_fig, use_container_width=True)            


    elif tab_selected == "üåç –ì–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑":
        st.subheader("üåç –ì–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑")
        # –°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫
        tab1, tab2 = st.tabs(["Cities & Countries", 
                              "Level of Deutsch"])

        # –í–∫–ª–∞–¥–∫–∞ 1: 
        with tab1:
        
            st.subheader("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–¥–µ–ª–æ–∫ –ø–æ –≥–æ—Ä–æ–¥–∞–º")
 
            # –ö–æ–ø–∏—Ä—É–µ–º DataFrame deals –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π df
            df = data.copy()
            
            # –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ —Å–¥–µ–ª–æ–∫
            df['is_successful'] = (df['Months of study'].notnull()).astype(int)
            
            # –ê–≥—Ä–µ–≥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ –≥–æ—Ä–æ–¥–∞–º
            city_analysis = df.groupby('City').agg(
                total_deals=('is_successful', 'size'),
                successful_deals=('is_successful', 'sum')
            )
            city_analysis['conversion_rate'] = (city_analysis['successful_deals'] / city_analysis['total_deals']).round(2)
            
            # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–¥–µ–ª–æ–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ–ø-–≥–æ—Ä–æ–¥–æ–≤
            top_cities = city_analysis.sort_values(by='total_deals', ascending=False).head(10)
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ —Å –¥–≤–æ–π–Ω–æ–π –æ—Å—å—é
            fig_city = make_subplots(specs=[[{"secondary_y": True}]])
            
            # –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–¥–µ–ª–æ–∫ (–ª–µ–≤–∞—è –æ—Å—å)
            fig_city.add_trace(
                go.Bar(
                    x=top_cities.index,
                    y=top_cities['total_deals'],
                    name='Total Deals',
                    marker_color='cornflowerblue',
                    text=top_cities['total_deals'],  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–µ—Ç–æ–∫
                    textposition='outside',  # –ü–æ–∑–∏—Ü–∏—è –º–µ—Ç–æ–∫
                ),
                secondary_y=False
            )
            
            # –õ–∏–Ω–µ–π–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏ (–ø—Ä–∞–≤–∞—è –æ—Å—å)
            fig_city.add_trace(
                go.Scatter(
                    x=top_cities.index,
                    y=top_cities['conversion_rate'],
                    name='Conversion Rate',
                    mode='lines+markers',
                    line=dict(color='magenta', dash="dash"),
                ),
                secondary_y=True
            )
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–µ–π
            fig_city.update_layout(
                title='Top 10 Cities: Deals and Conversion Rates',
                xaxis=dict(title='City', tickangle=45),
                yaxis = dict(
                    title="Number of Deals",
                    titlefont=dict(color="steelblue"),
                    tickfont=dict(color="steelblue"),
                    zeroline=False,
                    showgrid=False,
                ),
                yaxis2 = dict(
                    title="Conversion Rate",
                    titlefont=dict(color="magenta"),
                    tickfont=dict(color="magenta"),
                    zeroline=False,
                    showgrid=False,
                ),
                legend=dict(orientation="h", yanchor="bottom", y=1.02, xanchor="right", x=1),
                plot_bgcolor="white",
                height=500
            )

            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –≤ Streamlit
            st.plotly_chart(fig_city, use_container_width=True)


            st.subheader("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–¥–µ–ª–æ–∫ –ø–æ —Å—Ç—Ä–∞–Ω–∞–º")

            # –†–∞–¥–∏–æ–∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤–∫–ª—é—á–µ–Ω–∏—è/–∏—Å–∫–ª—é—á–µ–Ω–∏—è –ì–µ—Ä–º–∞–Ω–∏–∏
            include_germany = st.radio(
                "–í–∫–ª—é—á–∏—Ç—å –ì–µ—Ä–º–∞–Ω–∏—é –≤ –∞–Ω–∞–ª–∏–∑?",
                ("–î–∞", "–ù–µ—Ç")
            )
            
            # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±–æ—Ä–∞
            if include_germany == "–ù–µ—Ç":
                df_filtered = df[df['Country'] != 'Germany']
            else:
                df_filtered = df
            
            # –ê–≥—Ä–µ–≥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ —Å—Ç—Ä–∞–Ω–∞–º
            country_analysis = df_filtered.groupby('Country').agg(
                total_deals=('is_successful', 'size'),
                successful_deals=('is_successful', 'sum')
            )
            country_analysis['conversion_rate'] = (country_analysis['successful_deals'] / country_analysis['total_deals']).round(2)
            
            # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–¥–µ–ª–æ–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ–ø-–≥–æ—Ä–æ–¥–æ–≤
            top_countries = country_analysis.sort_values(by='total_deals', ascending=False).head(10)
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ —Å –¥–≤–æ–π–Ω–æ–π –æ—Å—å—é
            fig_countries = make_subplots(specs=[[{"secondary_y": True}]])
            
            # –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–¥–µ–ª–æ–∫ (–ª–µ–≤–∞—è –æ—Å—å)
            fig_countries.add_trace(
                go.Bar(
                    x=top_countries.index,
                    y=top_countries['total_deals'],
                    name='Total Deals',
                    marker_color='skyblue',
                    text=top_countries['total_deals'],  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–µ—Ç–æ–∫
                    textposition='outside',  # –ü–æ–∑–∏—Ü–∏—è –º–µ—Ç–æ–∫
                ),
                secondary_y=False
            )
            
            # –õ–∏–Ω–µ–π–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏ (–ø—Ä–∞–≤–∞—è –æ—Å—å)
            fig_countries.add_trace(
                go.Scatter(
                    x=top_countries.index,
                    y=top_countries['conversion_rate'],
                    name='Conversion Rate',
                    mode='lines+markers',
                    line=dict(color='green', dash="dash"),
                ),
                secondary_y=True
            )
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–µ–π
            fig_countries.update_layout(
                title='Top 10 Countries: Deals and Conversion Rates',
                xaxis=dict(title='Country', tickangle=45),
                yaxis=dict(
                    title="Number of Deals",
                    titlefont=dict(color="steelblue"),
                    tickfont=dict(color="steelblue"),
                    zeroline=False,
                    showgrid=False,
                ),
                yaxis2=dict(
                    title="Conversion Rate",
                    titlefont=dict(color="green"),
                    tickfont=dict(color="green"),
                    zeroline=False,
                    showgrid=False,
                ),
                legend=dict(orientation="h", yanchor="bottom", y=1.02, xanchor="right", x=1),
                plot_bgcolor="white",
                height=500
            )
            
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –≤ Streamlit
            st.plotly_chart(fig_countries, use_container_width=True)
            
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞
            st.title("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–¥–µ–ª–æ–∫ –Ω–∞ –∫–∞—Ä—Ç–µ")
            
            # –ó–∞–≥—Ä—É–∑–∫–∞ HTML-—Ñ–∞–π–ª–∞ –∫–∞—Ä—Ç—ã
            with open("deals_map.html", "r", encoding="utf-8") as f:
                map_html = f.read()
            
            # –í—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã –≤ –¥–∞—à–±–æ—Ä–¥
            components.html(map_html, height=600, scrolling=False)



        # –í–∫–ª–∞–¥–∫–∞ 2: 
        with tab2:
        
            st.subheader("–ê–Ω–∞–ª–∏–∑ –≤–ª–∏—è–Ω–∏–µ —É—Ä–æ–≤–Ω—è –∑–Ω–∞–Ω–∏—è –Ω–µ–º–µ—Ü–∫–æ–≥–æ —è–∑—ã–∫–∞ –Ω–∞ —É—Å–ø–µ—à–Ω–æ—Å—Ç—å —Å–¥–µ–ª–æ–∫ –≤ —Ä–∞–∑–Ω—ã—Ö –≥–æ—Ä–æ–¥–∞—Ö")
 
            # –ö–æ–ø–∏—Ä—É–µ–º DataFrame deals –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π df
            df = data.copy()

            # –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ —Å–¥–µ–ª–æ–∫
            df['is_successful'] = (df['Months of study'].notnull()).astype(int)
            
            # –ê–≥—Ä–µ–≥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ —É—Ä–æ–≤–Ω—é Level of Deutsch
            level_analysis = df.groupby('Level of Deutsch').agg(
                total_deals=('is_successful', 'size'),  # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫
                successful_deals=('is_successful', 'sum')  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω—ã—Ö —Å–¥–µ–ª–æ–∫
            )
            
            # –†–∞—Å—á–µ—Ç —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏
            level_analysis['success_rate'] = (level_analysis['successful_deals'] / level_analysis['total_deals']).round(2)
            
            # **–î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≥–≥–ª-–∫–Ω–æ–ø–∫—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏**
            sort_by = st.radio(
                "–°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ:",
                ('success_rate', 'total_deals'),
                index=1,
                format_func=lambda x: "–£—Å–ø–µ—à–Ω–æ—Å—Ç—å —Å–¥–µ–ª–æ–∫" if x == 'success_rate' else "–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫"
            )
            
            # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –ø–∞—Ä–∞–º–µ—Ç—Ä—É
            level_analysis_sorted = level_analysis.sort_values(by=sort_by, ascending=False)
            
            # –î–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
            levels = level_analysis_sorted.index
            success_rate = level_analysis_sorted['success_rate']
            total_deals = level_analysis_sorted['total_deals']
            
            # –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–≥—É—Ä—ã Plotly
            fig = go.Figure()
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–∞—Ä–∞ –¥–ª—è —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ —Å–¥–µ–ª–æ–∫
            fig.add_trace(
                go.Bar(
                    x=levels,
                    y=success_rate,
                    name='Success Rate',
                    marker_color='royalblue',
                    opacity=0.7,
                    yaxis='y1',
                    text=level_analysis['successful_deals'],  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–µ—Ç–æ–∫
                    textposition='inside',  # –ü–æ–∑–∏—Ü–∏—è –º–µ—Ç–æ–∫
                    textfont=dict(color='deepskyblue'),  # –¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞
                )
            )
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª–∏–Ω–∏–∏ –¥–ª—è –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–¥–µ–ª–æ–∫
            fig.add_trace(
                go.Scatter(
                    x=levels,
                    y=total_deals,
                    name='Total Deals',
                    mode='lines+markers+text',
                    line=dict(color='violet', width=2, dash='dot'),
                    yaxis='y2',
                    text=total_deals,  # –ó–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    textposition='top center',  # –ü–æ–∑–∏—Ü–∏—è —Ç–µ–∫—Å—Ç–∞
                    textfont=dict(color='violet'),  # –¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞
                )
            )
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Å–µ–π –∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ
            fig.update_layout(
                title='–£—Å–ø–µ—à–Ω–æ—Å—Ç—å —Å–¥–µ–ª–æ–∫ –∏ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ —É—Ä–æ–≤–Ω—è–º –∑–Ω–∞–Ω–∏—è —è–∑—ã–∫–∞',
                xaxis=dict(title='Level of Deutsch'),
                yaxis=dict(
                    title='Success Rate',
                    range=[0, 1],
                    titlefont=dict(color='royalblue'),
                    tickfont=dict(color='royalblue'),
                    showgrid=False
                ),
                yaxis2=dict(
                    title='Total Deals',
                    overlaying='y',
                    side='right',
                    titlefont=dict(color='violet'),
                    tickfont=dict(color='violet'),
                    showgrid=False,
                    zeroline=False
                ),
                legend=dict(
                    x=0.5,
                    y=1.1,
                    orientation="h"
                ),
                bargap=0.2,
                plot_bgcolor='white',
                hovermode='x unified',
            )
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ç–∫–∏ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
            # fig.update_xaxes(showgrid=True, gridwidth=0.5, gridcolor='lightgrey')
            # fig.update_yaxes(showgrid=True, gridwidth=0.5, gridcolor='lightgrey')
            
            # –í—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –≤ Streamlit
            st.plotly_chart(fig, use_container_width=True)



            # –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ä–µ–¥–Ω—é—é —É—Å–ø–µ—à–Ω–æ—Å—Ç—å —Å–¥–µ–ª–æ–∫ –ø–æ —É—Ä–æ–≤–Ω—è–º –∏ –≥–æ—Ä–æ–¥–∞–º
            city_level_success = df.groupby(['City', 'Level of Deutsch'])['is_successful'].mean().reset_index()
            
            # –û—Ç–æ–±—Ä–∞—Ç—å —Ç–æ–ø-10 –≥–æ—Ä–æ–¥–æ–≤ —Å –Ω–∞–∏–±–æ–ª—å—à–µ–π —É—Å–ø–µ—à–Ω–æ—Å—Ç—å—é –ø–æ –∫–∞–∂–¥–æ–º—É —É—Ä–æ–≤–Ω—é
            top_cities = city_level_success.groupby('Level of Deutsch').apply(
                lambda x: x.nlargest(10, 'is_successful')
            ).reset_index(drop=True)

            fig3 = px.bar(
                top_cities,
                x='is_successful',
                y='City',
                facet_col='Level of Deutsch',
                orientation='h',
                title="–£—Å–ø–µ—à–Ω–æ—Å—Ç—å —Å–¥–µ–ª–æ–∫ –≤ –≥–æ—Ä–æ–¥–∞—Ö –ø–æ —É—Ä–æ–≤–Ω—è–º –∑–Ω–∞–Ω–∏—è —è–∑—ã–∫–∞",
                color='City',  # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –ø–æ –≥–æ—Ä–æ–¥–∞–º
                color_discrete_sequence=px.colors.qualitative.Set2
                # color_discrete_sequence=px.px.colors.sequential.Viridis
                # color_discrete_sequence=px.colors.qualitative.Plotly
            )

            # –£–±–∏—Ä–∞–µ–º "Level of Deutsch=" –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Ñ–∞—Å–µ—Ç–æ–≤
            fig3.for_each_annotation(lambda a: a.update(text=a.text.split('=')[-1]))

            # –£–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏—è –æ—Å–µ–π X, –æ—Å—Ç–∞–≤–ª—è—è –∑–Ω–∞—á–µ–Ω–∏—è
            fig3.for_each_xaxis(lambda xaxis: xaxis.update(title_text=''))


            # –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–Ω–æ—Ç–∞—Ü–∏—é –∫–∞–∫ –≥–ª–æ–±–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Å–∏ X
            fig3.add_annotation(
                text="Success Rate",
                x=0.5, y=-0.11,  # –†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –≥—Ä–∞—Ñ–∏–∫–∞
                showarrow=False,
                xref="paper", yref="paper",  # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ –º–∞—Å—à—Ç–∞–±–µ –≤—Å–µ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞
                font=dict(size=14)
            )
            
            fig3.update_layout(
                title_x=0,
                height=800,
                plot_bgcolor="white",
                # showlegend=False
                # margin=dict(t=50, b=80)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –æ—Ç—Å—Ç—É–ø —Å–Ω–∏–∑—É –¥–ª—è –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏
            )

            st.plotly_chart(fig3, use_container_width=True)



            city_level_success = df.groupby(['City', 'Level of Deutsch']).agg(
                is_successful=('is_successful', 'mean'),
                total_deals=('is_successful', 'size')  # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫
            ).reset_index()

            fig4 = px.scatter(
                city_level_success,
                x='is_successful',
                y='City',
                size='total_deals',  # –†–∞–∑–º–µ—Ä –ø—É–∑—ã—Ä—å–∫–∞ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–¥–µ–ª–æ–∫
                color='Level of Deutsch',
                title="–£—Å–ø–µ—à–Ω–æ—Å—Ç—å —Å–¥–µ–ª–æ–∫ –≤ –≥–æ—Ä–æ–¥–∞—Ö —Å —É—á–µ—Ç–æ–º —É—Ä–æ–≤–Ω—è —è–∑—ã–∫–∞",
                size_max=15,
                color_discrete_sequence=px.colors.qualitative.Set2
            )
            
            fig4.update_layout(
                xaxis_title="Success Rate",
                yaxis_title="City",
                plot_bgcolor="white"
            )

            st.plotly_chart(fig4, use_container_width=True)




