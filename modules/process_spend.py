import streamlit as st
import pandas as pd
import numpy as np
from scipy import stats
import plotly.express as px
import plotly.graph_objects as go

def process_spend(data):
    st.header("–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö Spend")

    # –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è Spend
    st.sidebar.header("–§–∏–ª—å—Ç—Ä—ã –¥–ª—è Spend")

    # –§–∏–ª—å—Ç—Ä –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π: –ª—é–±—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–µ –ø–æ–ª—è, –∏—Å–∫–ª—é—á–∞—è "Date"
    category_column = st.sidebar.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—É—é –∫–æ–ª–æ–Ω–∫—É", 
        [None] + [col for col in data.select_dtypes(include='object').columns if col != "Date"], 
        format_func=lambda x: "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–æ–Ω–∫—É" if x is None else x
    )

    # –§–∏–ª—å—Ç—Ä –¥–ª—è –¥–∞—Ç—ã: —Ç–æ–ª—å–∫–æ –∫–æ–ª–æ–Ω–∫–∏ —Å "time" –∏–ª–∏ "date"
    date_column = st.sidebar.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–æ–Ω–∫—É —Å –¥–∞—Ç–∞–º–∏", 
        [None] + [col for col in data.columns if any(keyword in col.lower() for keyword in ["time", "date"])],
        format_func=lambda x: "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–æ–Ω–∫—É" if x is None else x
    )

    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    st.subheader("üìä –î–∞–Ω–Ω—ã–µ –∏ –æ–ø–∏—Å–∞—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    st.dataframe(data.head())

    # –û–ø–∏—Å–∞—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    st.subheader("–û–ø–∏—Å–∞—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    descriptive_stats = data.describe(include='all')
    
    # –ò—Å–∫–ª—é—á–∞–µ–º –ø–æ–ª—è –∏–∑ –æ–ø–∏—Å–∞—Ç–µ–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    exclude_columns = ['Impressions', 'Spend', 'Clicks']  # –û–±–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ä–µ–≥–∏—Å—Ç—Ä—É
    descriptive_stats = descriptive_stats.drop(
        columns=[col for col in descriptive_stats.columns if col in exclude_columns], 
        errors='ignore'
    )
    rows_to_keep = ["count", "unique", "top", "freq"]
    st.dataframe(descriptive_stats.loc[rows_to_keep])

    # –°–≤–æ–¥–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã—Ö —á–∏—Å–ª–æ–≤—ã—Ö –ø–æ–ª–µ–π
    st.subheader("–°–≤–æ–¥–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è —á–∏—Å–ª–æ–≤—ã—Ö –ø–æ–ª–µ–π")
    st.dataframe(data.describe().T)
    
    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —á–∏—Å–ª–æ–≤—ã—Ö –∫–æ–ª–æ–Ω–æ–∫ –∏–∑ exclude_columns
    numerical_fields = [col for col in exclude_columns if col in data.select_dtypes(include=['number']).columns]
    
    if not numerical_fields:
        st.warning("–ù–µ—Ç —á–∏—Å–ª–æ–≤—ã—Ö –ø–æ–ª–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Ä–µ–¥–∏ –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã—Ö.")
    else:
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
        summary_stats = []
        for field in numerical_fields:
            column_data = data[field].dropna()  # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    
            # –í—ã—á–∏—Å–ª–µ–Ω–∏—è
            mean_val = column_data.mean()
            median_val = column_data.median()
            mode_val = column_data.mode().iloc[0] if not column_data.mode().empty else "–ù–µ—Ç –º–æ–¥—ã"
            range_val = column_data.max() - column_data.min()
    
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü—É
            summary_stats.append({
                "–ü–æ–ª–µ": field,
                "–°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ": mean_val,
                "–ú–µ–¥–∏–∞–Ω–∞": median_val,
                "–ú–æ–¥–∞": mode_val,
                "–î–∏–∞–ø–∞–∑–æ–Ω": range_val
            })
    
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π –≤ DataFrame
        summary_df = pd.DataFrame(summary_stats)
    
        # –í—ã–≤–æ–¥ —Å –ø–æ–º–æ—â—å—é st.dataframe
        st.dataframe(summary_df.style.format({
            "–°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ": "{:.2f}",
            "–ú–µ–¥–∏–∞–Ω–∞": "{:.2f}",
            "–î–∏–∞–ø–∞–∑–æ–Ω": "{:.2f}"
        }))



    
    # –û—Å–Ω–æ–≤–Ω–æ–π –±–ª–æ–∫ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    st.subheader("üìà –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
    if category_column:
        # –†–∞–¥–∏–æ–∫–Ω–æ–ø–∫–∞ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è/–∏—Å–∫–ª—é—á–µ–Ω–∏—è NaN
        include_nan = st.radio(
            "–í–∫–ª—é—á–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è NaN?",
            options=["–ë–µ–∑ NaN", "–° NaN"],
            index=0,  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî –±–µ–∑ NaN
            horizontal=True
        )
    
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        category_data = data[category_column].copy()
        if include_nan == "–° NaN":
            category_data = category_data.fillna("NaN")  # –ó–∞–º–µ–Ω—è–µ–º NaN –Ω–∞ —Å—Ç—Ä–æ–∫—É "NaN"
        else:
            category_data = category_data.dropna()  # –£–±–∏—Ä–∞–µ–º NaN
    
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
        category_counts = category_data.value_counts()
    
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ
        if category_counts.empty:
            st.warning(f"–ö–æ–ª–æ–Ω–∫–∞ '{category_column}' –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏.")
        else:
            # –í—ã–±–æ—Ä —Ç–∏–ø–∞ –≥—Ä–∞—Ñ–∏–∫–∞
            chart_type = st.radio(
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≥—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π",
                options=["BarH", "BarV", "Pie"],
                index=0,  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—ã–±—Ä–∞–Ω BarH
                horizontal=True
            )
    
            # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
            if chart_type == "BarH":
                fig_category = go.Figure(
                    go.Bar(
                        x=category_counts.values,
                        y=category_counts.index,
                        orientation="h",
                        marker=dict(color="royalblue"),
                        text=category_counts.values,  # –ó–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                        textposition="outside"  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
                    )
                )
    
                # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è
                fig_category.update_layout(
                    title=f"–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ {category_column}",
                    xaxis=dict(title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", tickfont=dict(size=10)),
                    yaxis=dict(title="–ö–∞—Ç–µ–≥–æ—Ä–∏–∏", tickfont=dict(size=10), autorange="reversed"),  # –ò–Ω–≤–µ—Ä—Å–∏—è –æ—Å–∏ Y
                    plot_bgcolor="white"
                )
    
            elif chart_type == "BarV":
                fig_category = go.Figure(
                    go.Bar(
                        x=category_counts.index,
                        y=category_counts.values,
                        marker=dict(color="royalblue"),
                        text=category_counts.values,  # –ó–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                        textposition="outside"  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
                    )
                )
    
                # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è
                fig_category.update_layout(
                    title=f"–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ {category_column}",
                    xaxis=dict(title="–ö–∞—Ç–µ–≥–æ—Ä–∏–∏", tickfont=dict(size=10)),
                    yaxis=dict(title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", tickfont=dict(size=10)),
                    plot_bgcolor="white"
                )
    
            elif chart_type == "Pie":
                fig_category = px.pie(
                    category_counts,
                    values=category_counts.values,
                    names=category_counts.index,
                    title=f"–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ {category_column}",
                    color_discrete_sequence=px.colors.qualitative.Plotly
                )
    
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
            st.plotly_chart(fig_category)
    else:
        st.write("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å –ª–µ–≤–æ–π –ø–∞–Ω–µ–ª–∏")
            


    # –ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤
    st.subheader("üìâ –ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤")
    
    if date_column:
        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç datetime
        data[date_column] = pd.to_datetime(data[date_column])
        
        # –†–∞–¥–∏–æ-–∫–Ω–æ–ø–∫–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏
        aggregation_level = st.radio(
            "–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –∞–≥—Ä–µ–≥–∞—Ü–∏–∏",
            options=["–ú–µ—Å—è—Ü", "–ù–µ–¥–µ–ª—è", "–î–µ–Ω—å"],
            index=0,  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é "–ú–µ—Å—è—Ü"
            horizontal=True
        )
    
        # –ê–≥—Ä–µ–≥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        if aggregation_level == "–î–µ–Ω—å":
            time_series = data.groupby(data[date_column].dt.date).size()
            title = "–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Ç—Ä–µ–Ω–¥ —Ä–µ–∫–ª–∞–º–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"
            show_markers = False  # –ú–∞—Ä–∫–µ—Ä—ã –Ω–µ –Ω—É–∂–Ω—ã –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞
        elif aggregation_level == "–ù–µ–¥–µ–ª—è":
            time_series = data.groupby(data[date_column].dt.to_period("W")).size()
            title = "–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–¥ —Ä–µ–∫–ª–∞–º–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"
            show_markers = False  # –ú–∞—Ä–∫–µ—Ä—ã –Ω–µ –Ω—É–∂–Ω—ã –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞
        else:  # "–ú–µ—Å—è—Ü"
            time_series = data.groupby(data[date_column].dt.to_period("M")).size()
            title = "–ï–∂–µ–º–µ—Å—è—á–Ω—ã–π —Ç—Ä–µ–Ω–¥ —Ä–µ–∫–ª–∞–º–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"
            show_markers = True  # –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä—ã –¥–ª—è –µ–∂–µ–º–µ—Å—è—á–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞
        
        # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
        fig_time = px.line(
            x=time_series.index.astype(str),  # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–ª—è Plotly
            y=time_series.values,
            title=title,
            labels={"x": "–î–∞—Ç–∞", "y": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π"},
            markers=show_markers  # –í–∫–ª—é—á–∞–µ–º –º–∞—Ä–∫–µ—Ä—ã –¥–ª—è –µ–∂–µ–º–µ—Å—è—á–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞
        )

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—ã—Å–æ—Ç—ã –≥—Ä–∞—Ñ–∏–∫–∞
        fig_time.update_layout(height=500)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∏ –∑–Ω–∞—á–µ–Ω–∏–π —Ç–æ–ª—å–∫–æ –¥–ª—è –µ–∂–µ–º–µ—Å—è—á–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞
        if aggregation_level == "–ú–µ—Å—è—Ü":
            fig_time.update_traces(
                text=time_series.values,  # –ó–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –ø–æ–¥–ø–∏—Å–µ–π
                textposition="top center",  # –ü–æ–∑–∏—Ü–∏—è –ø–æ–¥–ø–∏—Å–∏
                mode="lines+markers+text"  # –õ–∏–Ω–∏–∏, –º–∞—Ä–∫–µ—Ä—ã –∏ –ø–æ–¥–ø–∏—Å–∏
            )
        if aggregation_level == "–ù–µ–¥–µ–ª—è":
            fig_time.update_traces(
                mode="lines+markers"  # –õ–∏–Ω–∏–∏, –º–∞—Ä–∫–µ—Ä—ã
            )
            fig_time.update_layout(
                xaxis=dict(tickangle=45)  # –£–≥–æ–ª –Ω–∞–∫–ª–æ–Ω–∞ –ø–æ–¥–ø–∏—Å–µ–π –æ—Å–∏ X
            )            
        
        st.plotly_chart(fig_time)
    else:
        st.write("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–æ–Ω–∫—É —Å –¥–∞—Ç–∞–º–∏ —Å –ª–µ–≤–æ–π –ø–∞–Ω–µ–ª–∏")







